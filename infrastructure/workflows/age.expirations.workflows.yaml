# age.expirations.workflows.yaml
main:

  params: [input]
  steps:

      # Initialize
    - init:
        assign:
          # Input Values
          - expiry_timestamp: $${ default( map.get(input, ["expiry_timestamp"]), "MISSING" )}
          - project_id: $${ default( map.get(input, ["project_id"]), "MISSING" )}
          - registration_id: $${ default( map.get(input, ["registration_id"]), "MISSING" )}
          # Static Values
          - project_delete_workflow_id: $${ "${deletion_workflow_id}" }
          # Workflows Values
          - this_location: $${ sys.get_env("GOOGLE_CLOUD_LOCATION") }
          - this_project_id: $${ sys.get_env("GOOGLE_CLOUD_PROJECT_ID") }
          - this_workflow_id: $${ sys.get_env("GOOGLE_CLOUD_WORKFLOW_ID") }
          # Log Values
          - now_timestamp: $${ sys.now() }
          - log_status: $${ "INFO" }
          - log_message: $${ "Workflow started" }
          - execution_id: $${ sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID") }
          - workflow_result: null
          

      # Test the input values are present
    - test_input_values_present:
        switch:
          - condition: $${ expiry_timestamp == "MISSING" }
            assign:
              - log_status: $${ "ERROR" }
              - log_message: $${ "[" + project_id + "], input is missing an expiry_timestamp" }
            next: write_to_log
          - condition: $${ project_id == "MISSING" }
            assign:
              - log_status: $${ "ERROR" }
              - log_message: $${ "[" + project_id + "], input is missing a project_id" }
            next: write_to_log
          - condition: $${ registration_id == "MISSING" }
            assign:
              - log_status: $${ "ERROR" }
              - log_message: $${ "[" + project_id + "], input is missing a registration_id" }
            next: write_to_log
          - condition: true
            next: extract_expiration_timestamp


      # Try to extract an expiration epoch timestamp from the given value
    - extract_expiration_timestamp:
        try:
          assign:
            - expiry_timestamp: $${ time.parse(input.expiry_timestamp) }
        except:
          as: e
          steps:
            - handle_expiration_time_parse_error:
                assign:
                - log_status: $${ "ERROR" }
                - log_message: $${ "[" + project_id + "] could not extract an expiration timestamp from the input"}
                next: write_to_log


      # Test to see if the project has expired
    - test_project_expiration:
        switch:
            # Project has expired, start expiration
          - condition:  $${ now_timestamp > expiry_timestamp }
            assign:
              - log_status: $${ "INFO" }
              - log_message: $${ "[" + project_id + "] expired, starting expiration"}
            next: start_project_deletion_request
            # Project has not expired, skip expiration
          - condition: $${ now_timestamp <= expiry_timestamp }
            assign:
              - log_status: $${ "INFO" }
              - log_message: $${ "[" + project_id + "] has NOT expired, skipping expiration"}
            next: write_to_log
            # Can not determine if expiration timestamp is gt/lt now
          - condition: true
            assign:
              - log_status: $${ "ERROR" }
              - log_message: $${ "[" + project_id + "] could not determine if expiry is gt or lt now"}
            next: write_to_log


      # Request a project deletion from project-delete workflow - with "project_id" and "registration_id"
    - start_project_deletion_request:
        try:
          call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
          args:
            workflow_id: $${ project_delete_workflow_id }
            location: $${ this_location }
            project_id: $${ this_project_id }
            argument:
              project_id: $${ project_id }
              registration_id: $${ registration_id }
        except:
          as: e
          steps:
            - handle_start_project_deletion_request_exception:
                assign:
                  - log_status: $${ "ERROR" }
                  - log_message: '$${ "[" + project_id + "] could not call deletion workflow with error: " + json.encode_to_string(e) }'
                next: write_to_log


    # Prepare success log message
    - prepare_success_log:
        steps:
          - set_success_log_message:
              assign:               
                - log_message: '$${ "Workflow execution " + execution_id + " completed successfully" }'


    # Write message to log
    - write_to_log:
        steps:
          - build_log_line:
              assign:
                - time_elapsed_split: $${ text.split("" + (sys.now() - now_timestamp), ".") }
                - time_elapsed: $${ time_elapsed_split[0] + "." + text.substring(time_elapsed_split[1],0,5) }
                - workflow_result:
                    status: $${ log_status }
                    message: $${ log_message }
                    elapsed_time: $${ time_elapsed + " seconds"}
                    workflow_id: $${ this_workflow_id }
          - call_sys_log:
              call: sys.log
              args:
                  severity: $${ log_status }
                  json: $${ workflow_result }
              next: exit


    # Final step
    - exit:
        switch:
          - condition: $${ log_status == "ERROR" }
            raise: $${ workflow_result }
          - condition: true
            return: $${ workflow_result }